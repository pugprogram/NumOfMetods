# -*- coding: utf-8 -*-
"""lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CzJ7uaxdcn6Z6T98ZwKTltpKegoJU78f

Функция для нахождения скалярного произведения векторов
"""

def ScalarMultyplication(vector1, vector2):
  SumScalar=0
  len1=len(vector1)
  len2=len(vector2)
  i=0
  while (i<len1) and (i<len2):
    SumScalar+=vector1[i]*vector2[i]
    i+=1
  return SumScalar

"""Функция для нахождения Эвклидовой нормы вектора"""

import math
def EuclidovaNorma(vector):
  SumElemOfVector=0
  for elem in vector:
    SumElemOfVector+=abs(elem)**2
  SumElemOfVector=math.sqrt(SumElemOfVector)
  return SumElemOfVector

"""Умножение матрицы на матрицу"""

def MultiplicationMatrix(matrix1,matrix2):
  NumOfStrMatrix1=len(matrix1)
  NumOfColumnMatrix2=len(matrix2[0])
  n=len(matrix2)
  ResultMatrix=[[0 for i in range(NumOfStrMatrix1)] for j in range(NumOfColumnMatrix2)]
  for i in range (NumOfStrMatrix1):
    for j in range (NumOfColumnMatrix2):
      ResultMatrix[i][j]=sum(matrix1[i][k]*matrix2[k][j] for k in range(n))
  return ResultMatrix

"""Умножение матрицы на вектор"""

def MultiplicationMatrixAndVector(matrix,vector):
  lenVector=len(vector)
  lenMatrix=len(matrix)
  ResultVector=[0 for i in range(lenMatrix)]
  for i in range (lenMatrix):
    ResultVector[i]=sum(matrix[i][j]*vector[j] for j in range(lenVector))
  return ResultVector

"""Транспонирование матрицы"""

def TranspositionMatrix(matrix):
  NumOfStrMatrix=len(matrix)
  NumOfColumnMatrix=len(matrix[0])
  ResultMatrix=[[0 for i in range(NumOfStrMatrix)] for j in range(NumOfColumnMatrix)]
  for i in range (NumOfStrMatrix):
    for j in range (NumOfColumnMatrix):
      ResultMatrix[j][i]=matrix[i][j]
  return ResultMatrix

"""Построение графика произвольной функции от одной переменной"""

import numpy as np
import matplotlib.pyplot as plt

def graph(funcInput,x):
  plt.plot(x,funcInput)

x=np.arange(-10, 10.01, 0.01)
graph(np.cos(x),x)

"""Погрешность вычислений объема шара"""

